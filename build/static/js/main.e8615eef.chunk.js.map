{"version":3,"sources":["logo.svg","components/Chat.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","window","socket","location","origin","path","Chat","state","online","input","messages","handlerChange","e","setState","target","value","recMessage","content","time","moment","format","message","prev","emit","on","this","className","Container","fluid","MessageHeader","Segment","clearing","Header","as","floated","style","marginBottom","Subheader","Comment","Group","map","el","Avatar","Content","Author","author","Metadata","Text","Input","name","label","Button","icon","labelPosition","placeholder","onChange","widths","color","onClick","Component","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,0RCM3CC,OAAOC,OAASA,IAAOD,OAAOE,SAASC,OAAQ,CAC3CC,KAAM,W,IAoHOC,E,4MA/GbC,MAAQ,CACJC,OAAQ,EACRC,MAAM,GACNC,SAAS,I,EAmBbC,cAAc,SAACC,GACX,EAAKC,SAAS,CACVJ,MAAMG,EAAEE,OAAOC,S,EAIrBC,WAAW,WACP,IAAIC,EAAU,CACVC,KAAMC,MAASC,OAAO,OACtBC,QAAQ,EAAKd,MAAME,OAIvB,EAAKI,UAAS,SAAAS,GAAI,MAAI,CAClBZ,SAAS,GAAD,mBAAKY,EAAKZ,UAAV,CAAmBO,IAC3BR,MAAO,OAEXR,OAAOC,OAAOqB,KAAK,UAAWN,I,kEAjChB,IAAD,OAEfhB,OAAOC,OAAOsB,GAAG,iBAAiB,SAAChB,GAC/B,EAAKK,SAAS,CACVL,OAAQA,OAIhBP,OAAOC,OAAOsB,GAAG,eAAe,SAACH,GAC7B,EAAKR,UAAU,SAAAS,GAAI,MAAK,CACpBZ,SAAS,GAAD,mBAAMY,EAAKZ,UAAX,CAAqBW,a,+BA2B/B,IAAD,EACqBI,KAAKlB,MAAhBG,GADV,EACED,MADF,EACUC,UACjB,OACE,yBAAKgB,UAAU,aACb,kBAACC,EAAA,EAAD,CAAWC,OAAK,GAEhB,kBAACC,EAAA,EAAD,MACG,kBAACC,EAAA,EAAD,KAEA,kBAACA,EAAA,EAAD,CAASC,UAAQ,GACZ,kBAACC,EAAA,EAAD,CACAJ,MAAM,OACNK,GAAG,KACHC,QAAQ,OACRC,MAAO,CACHC,aAAc,IAElB,kBAACJ,EAAA,EAAOK,UAAR,iCAC8BZ,KAAKlB,MAAMC,UAK5C,kBAAC8B,EAAA,EAAQC,MAAT,CAAeb,UAAU,YACxBhB,EAAS8B,KAAK,SAAAC,GAAE,OACb,kBAACH,EAAA,EAAD,KACA,kBAACA,EAAA,EAAQI,OAAT,MACA,kBAACJ,EAAA,EAAQK,QAAT,KACI,kBAACL,EAAA,EAAQM,OAAT,CAAgBX,GAAG,KACdQ,EAAGI,QAER,kBAACP,EAAA,EAAQQ,SAAT,KACIL,EAAGvB,MAGV,kBAACoB,EAAA,EAAQS,KAAT,KAAeN,EAAGpB,gBAQzB,kBAACS,EAAA,EAAD,CAASJ,UAAU,iBACd,kBAACsB,EAAA,EAAD,CACIpB,OAAK,EACLqB,KAAK,UACLd,MAAO,CACHC,aAAc,SAElBc,MAAO,kBAACC,EAAA,EAAD,CAAQC,KAAK,QACpBC,cAAc,OACdC,YAAY,qBACZC,SAAU9B,KAAKd,cACfI,MAAOU,KAAKlB,MAAME,QAEtB,kBAAC0C,EAAA,EAAOZ,MAAR,CAAca,MAAI,EAACI,OAAO,KACtB,kBAACL,EAAA,EAAD,CAAQM,MAAM,SAASxC,QAAQ,YAAYoC,cAAc,OAAOD,KAAK,OAAOM,QAASjC,KAAKT,qB,GArG7F2C,aCEJC,MARf,WACE,OACE,yBAAKlC,UAAU,OACb,kBAAC,EAAD,QCIcmC,QACW,cAA7B5D,OAAOE,SAAS2D,UAEe,UAA7B7D,OAAOE,SAAS2D,UAEhB7D,OAAOE,SAAS2D,SAASC,MACvB,2D,OCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMvD,c","file":"static/js/main.e8615eef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport { Container, MessageHeader, Segment, Comment, Input, Button, Header, Icon} from 'semantic-ui-react';\nimport moment from 'moment';\n\nimport socket from \"socket.io-client\";\n\nwindow.socket = socket(window.location.origin, {\n    path: \"/chat/\"\n});\n\n\nclass Chat extends Component {\n    state = {\n        online: 1,\n        input:'',\n        messages:[],\n    }\n\n    componentDidMount(){\n\n        window.socket.on(\"change-online\", (online) => {\n            this.setState({\n                online: online\n            })\n        })\n\n        window.socket.on(\"new-message\", (message) => {            \n            this.setState (prev => ({\n                messages: [...prev.messages, message],\n            }))\n        });\n    }\n\n\n    handlerChange=(e)=>{\n        this.setState({\n            input:e.target.value\n        })\n      }\n  \n      recMessage=()=>{\n          let content = {\n              time: moment().format('LTS'),\n              message:this.state.input,\n          }\n\n\n          this.setState(prev =>({\n              messages:[...prev.messages,content],\n              input: '',\n          }))\n          window.socket.emit(\"message\", content);        \n        }\n  \n\n    render() {\n        const {input , messages}= this.state;\n      return (\n        <div className='container'>\n          <Container fluid>\n  \n          <MessageHeader/>\n             <Segment>\n  \n             <Segment clearing>\n                  <Header \n                  fluid='true'\n                  as='h2'\n                  floated='left'\n                  style={{\n                      marginBottom: 0\n                  }}>\n                  <Header.Subheader>\n                      Our Chat / Online Users: {this.state.online}\n                  </Header.Subheader>\n                  </Header>\n              </Segment>\n  \n               <Comment.Group className='messages'>\n               {messages.map( el =>\n                   <Comment>\n                   <Comment.Avatar/>\n                   <Comment.Content>\n                       <Comment.Author as='a'>\n                           {el.author}\n                       </Comment.Author>\n                       <Comment.Metadata>\n                          {el.time}\n                       </Comment.Metadata>\n  \n                    <Comment.Text>{el.message}</Comment.Text>\n                   </Comment.Content>\n               </Comment>)}\n  \n               </Comment.Group>\n             </Segment>\n  \n  \n             <Segment className='message__form'>\n                  <Input\n                      fluid\n                      name='message'\n                      style={{\n                          marginBottom: '.7rem'\n                      }}\n                      label={<Button icon='add'/>}\n                      labelPosition='left'\n                      placeholder='Write your message'\n                      onChange={this.handlerChange}\n                      value={this.state.input}\n                     />\n                  <Button.Group icon widths='2'>\n                      <Button color='orange' content='Add Reply' labelPosition='left' icon='edit' onClick={this.recMessage} />\n                      {/* <Button color='teal' content='Upload media' labelPosition='right' icon='cloud upload' onClick={this.toggleModal}/> */}\n                  </Button.Group>\n              </Segment> \n  \n          </Container>\n        </div>\n      )\n    }\n  }\n  \n  export default Chat","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Chat from './components/Chat'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Chat/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}